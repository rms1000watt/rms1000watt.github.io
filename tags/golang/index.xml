<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on rms1000watt</title>
    <link>https://rms1000watt.github.io/tags/golang/</link>
    <description>Recent content in Golang on rms1000watt</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 20 Aug 2018 07:32:00 -0700</lastBuildDate>
    
	<atom:link href="https://rms1000watt.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Testing Your Go App: Get Started the Easy Way</title>
      <link>https://rms1000watt.github.io/post/testing-your-go-app-get-started-the-easy-way/</link>
      <pubDate>Mon, 20 Aug 2018 07:32:00 -0700</pubDate>
      
      <guid>https://rms1000watt.github.io/post/testing-your-go-app-get-started-the-easy-way/</guid>
      <description>TLDR: VS Code can generate the foundation for your table driven tests and git precommit hooks can enforce successful tests before reaching Github
Gabriel Aszalos gave an excellent introductory blog post to testing in Golang; I recommend you read it: Your Introductory Course to Testing with Go. On top of this, I want to mention that your IDE can help you do some heavy lifting when writing tests, specifically, VS Code.</description>
    </item>
    
    <item>
      <title>Golang Env from Scratch</title>
      <link>https://rms1000watt.github.io/post/golang-from-scratch/</link>
      <pubDate>Fri, 10 Mar 2017 08:00:00 -0800</pubDate>
      
      <guid>https://rms1000watt.github.io/post/golang-from-scratch/</guid>
      <description>This guide will help you install Golang and some useful developer tools in your fresh OS X instance. And there is a Hello World example at the end!
Installations include:
 Homebrew Golang Zsh (with Oh My Zsh) Terminal.app Options Visual Studio Code (with plugins)  
Installation Find and open the Terminal app in OS X. Run these commands.
(The code blocks below will have comments in them which start with a # but you should be able to copy and paste the whole code block into the Terminal.</description>
    </item>
    
    <item>
      <title>What is gRPC?</title>
      <link>https://rms1000watt.github.io/post/what-is-grpc/</link>
      <pubDate>Thu, 23 Feb 2017 07:11:58 -0800</pubDate>
      
      <guid>https://rms1000watt.github.io/post/what-is-grpc/</guid>
      <description>TLDR: After you get past the learning curve of the topic (which is the bulk of this post), gRPC is an amazing framework!
gRPC is Google&amp;rsquo;s &amp;ldquo;&amp;hellip;high performance, open-source universal RPC framework.&amp;rdquo; Which doesn&amp;rsquo;t really mean anything to the newcomer. To help you understand what this actually means, let&amp;rsquo;s look at what you&amp;rsquo;re already used to REST API and compare it gRPC.
What you&amp;rsquo;re used to
REST API = HTTP1.</description>
    </item>
    
    <item>
      <title>OpenSSL in Go</title>
      <link>https://rms1000watt.github.io/post/openssl-in-go/</link>
      <pubDate>Wed, 22 Feb 2017 07:11:58 -0800</pubDate>
      
      <guid>https://rms1000watt.github.io/post/openssl-in-go/</guid>
      <description>Food for thought: What if you wanted to use Go AND meet compliance requirements?
Golang devs have specifically mentioned that some compliance requirements are not planned to be incorporated into the code base as seen here.
So, an open question to the community: can anyone provide a working implementation of OpenSSL in Go for server/client that works out of the box? For instance, is there a project where I could&amp;hellip;</description>
    </item>
    
    <item>
      <title>Awesome Everything</title>
      <link>https://rms1000watt.github.io/post/awesome-everything/</link>
      <pubDate>Sun, 22 Jan 2017 07:11:58 -0800</pubDate>
      
      <guid>https://rms1000watt.github.io/post/awesome-everything/</guid>
      <description>Curated List of Everything Awesome This list is nowhere near exhaustive
 Golang Python C C++ ReactJS HTML Serialization AWS Security  
Golang Introduction  Go By Example Tour of Go Dave Cheney&amp;rsquo;s Guide  Tutorials  Go with Docker from Scratch  AwesomeGo  Awesome Go GoVendor  
Python Tutorials  Multiprocessing with Websockets  Servers  Tornado Web  
C Servers  Lwan</description>
    </item>
    
  </channel>
</rss>